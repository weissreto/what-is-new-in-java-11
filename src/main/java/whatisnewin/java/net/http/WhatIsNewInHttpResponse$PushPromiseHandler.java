package whatisnewin.java.net.http;

import java.net.http.HttpResponse.PushPromiseHandler;
import java.net.http.HttpRequest;
import java.util.function.Function;
import java.net.http.HttpResponse.BodyHandler;
import java.util.concurrent.CompletableFuture;
import java.net.http.HttpResponse;
import java.util.concurrent.ConcurrentMap;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link PushPromiseHandler}
 * that were newly introduced in Java version 11.<br>
 *
 * {@link PushPromiseHandler} is a completely new class.
 * @since 11
 * @see PushPromiseHandler
 */
public final class WhatIsNewInHttpResponse$PushPromiseHandler<T>
{
  /**
   * Example call to new method {@link PushPromiseHandler#applyPushPromise(HttpRequest, HttpRequest, Function)}.
   * @since 11
   * @see PushPromiseHandler#applyPushPromise(HttpRequest, HttpRequest, Function)
   */
  public void applyPushPromise(HttpRequest initiatingRequest, HttpRequest pushPromiseRequest, Function<BodyHandler<T>, CompletableFuture<HttpResponse<T>>> acceptor)
  {
    PushPromiseHandler<T> testee = $$$();

    testee.applyPushPromise(initiatingRequest, pushPromiseRequest, acceptor);
  }

  /**
   * Example call to new method {@link PushPromiseHandler#of(Function, ConcurrentMap)}.
   * @since 11
   * @see PushPromiseHandler#of(Function, ConcurrentMap)
   */
  public static <T> PushPromiseHandler<T> of(Function<HttpRequest, BodyHandler<T>> pushPromiseHandler, ConcurrentMap<HttpRequest, CompletableFuture<HttpResponse<T>>> pushPromisesMap)
  {
    PushPromiseHandler<T> result = PushPromiseHandler.of(pushPromiseHandler, pushPromisesMap);
    return result;
  }

  private PushPromiseHandler<T> $$$()
  {
    return null;
  }
}
