package whatisnewin.java.net.http;

import java.net.http.HttpResponse.BodySubscribers;
import java.net.http.HttpResponse.BodySubscriber;
import java.util.function.Consumer;
import java.util.Optional;
import java.util.concurrent.Flow.Publisher;
import java.util.List;
import java.nio.ByteBuffer;
import java.util.function.Function;
import java.util.concurrent.Flow.Subscriber;
import java.util.stream.Stream;
import java.nio.charset.Charset;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.OpenOption;

/**
 * This source file was generated by WhatIsNewInJava<br>
 *
 * This class provides an example call to each method in class {@link BodySubscribers}
 * that were newly introduced in Java versions 11.<br>
 *
 * {@link BodySubscribers} is a completely new class
 * @since 11
 * @see BodySubscribers
 */
public final class WhatIsNewInHttpResponse$BodySubscribers
{
  /**
   * Example call to new method {@link BodySubscribers#ofByteArrayConsumer}
   * @since 11
   * @see BodySubscribers#ofByteArrayConsumer
   */
  public static BodySubscriber<Void> ofByteArrayConsumer(Consumer<Optional<byte[]>> consumer)
  {
    BodySubscriber<Void> result = BodySubscribers.ofByteArrayConsumer(consumer);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#ofPublisher}
   * @since 11
   * @see BodySubscribers#ofPublisher
   */
  public static BodySubscriber<Publisher<List<ByteBuffer>>> ofPublisher()
  {
    BodySubscriber<Publisher<List<ByteBuffer>>> result = BodySubscribers.ofPublisher();
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#mapping}
   * @since 11
   * @see BodySubscribers#mapping
   */
  public static <T, U> BodySubscriber<U> mapping(BodySubscriber<T> upstream, Function<? super T, ? extends U> mapper)
  {
    BodySubscriber<U> result = BodySubscribers.mapping(upstream, mapper);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#ofByteArray}
   * @since 11
   * @see BodySubscribers#ofByteArray
   */
  public static BodySubscriber<byte[]> ofByteArray()
  {
    BodySubscriber<byte[]> result = BodySubscribers.ofByteArray();
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#buffering}
   * @since 11
   * @see BodySubscribers#buffering
   */
  public static <T> BodySubscriber<T> buffering(BodySubscriber<T> downstream, int bufferSize)
  {
    BodySubscriber<T> result = BodySubscribers.buffering(downstream, bufferSize);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#fromSubscriber}
   * @since 11
   * @see BodySubscribers#fromSubscriber
   */
  public static BodySubscriber<Void> fromSubscriber(Subscriber<? super List<ByteBuffer>> subscriber)
  {
    BodySubscriber<Void> result = BodySubscribers.fromSubscriber(subscriber);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#fromSubscriber}
   * @since 11
   * @see BodySubscribers#fromSubscriber
   */
  public static <S extends Subscriber<? super List<ByteBuffer>>, T> BodySubscriber<T> fromSubscriber(S subscriber, Function<? super S, ? extends T> finisher)
  {
    BodySubscriber<T> result = BodySubscribers.fromSubscriber(subscriber, finisher);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#discarding}
   * @since 11
   * @see BodySubscribers#discarding
   */
  public static BodySubscriber<Void> discarding()
  {
    BodySubscriber<Void> result = BodySubscribers.discarding();
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#ofLines}
   * @since 11
   * @see BodySubscribers#ofLines
   */
  public static BodySubscriber<Stream<String>> ofLines(Charset charset)
  {
    BodySubscriber<Stream<String>> result = BodySubscribers.ofLines(charset);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#replacing}
   * @since 11
   * @see BodySubscribers#replacing
   */
  public static <U> BodySubscriber<U> replacing(U value)
  {
    BodySubscriber<U> result = BodySubscribers.replacing(value);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#fromLineSubscriber}
   * @since 11
   * @see BodySubscribers#fromLineSubscriber
   */
  public static BodySubscriber<Void> fromLineSubscriber(Subscriber<? super String> subscriber)
  {
    BodySubscriber<Void> result = BodySubscribers.fromLineSubscriber(subscriber);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#fromLineSubscriber}
   * @since 11
   * @see BodySubscribers#fromLineSubscriber
   */
  public static <S extends Subscriber<? super String>, T> BodySubscriber<T> fromLineSubscriber(S subscriber, Function<? super S, ? extends T> finisher, Charset charset, String lineSeparator)
  {
    BodySubscriber<T> result = BodySubscribers.fromLineSubscriber(subscriber, finisher, charset, lineSeparator);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#ofInputStream}
   * @since 11
   * @see BodySubscribers#ofInputStream
   */
  public static BodySubscriber<InputStream> ofInputStream()
  {
    BodySubscriber<InputStream> result = BodySubscribers.ofInputStream();
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#ofString}
   * @since 11
   * @see BodySubscribers#ofString
   */
  public static BodySubscriber<String> ofString(Charset charset)
  {
    BodySubscriber<String> result = BodySubscribers.ofString(charset);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#ofFile}
   * @since 11
   * @see BodySubscribers#ofFile
   */
  public static BodySubscriber<Path> ofFile(Path file, OpenOption[] openOptions)
  {
    BodySubscriber<Path> result = BodySubscribers.ofFile(file, openOptions);
    return result;
  }

  /**
   * Example call to new method {@link BodySubscribers#ofFile}
   * @since 11
   * @see BodySubscribers#ofFile
   */
  public static BodySubscriber<Path> ofFile(Path file)
  {
    BodySubscriber<Path> result = BodySubscribers.ofFile(file);
    return result;
  }

}
